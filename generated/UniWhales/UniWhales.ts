// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UniWhales extends ethereum.SmartContract {
  static bind(address: Address): UniWhales {
    return new UniWhales("UniWhales", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, tokens: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startDate(): BigInt {
    let result = super.call("startDate", "startDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startDate", "startDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(from: Address, to: Address, tokens: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVaultReleaseTimeFrom(from: Address): BigInt {
    let result = super.call(
      "getVaultReleaseTimeFrom",
      "getVaultReleaseTimeFrom(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );

    return result[0].toBigInt();
  }

  try_getVaultReleaseTimeFrom(from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultReleaseTimeFrom",
      "getVaultReleaseTimeFrom(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limitTradeByOwner(): boolean {
    let result = super.call(
      "limitTradeByOwner",
      "limitTradeByOwner():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_limitTradeByOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "limitTradeByOwner",
      "limitTradeByOwner():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isLocked(): boolean {
    let result = super.call("isLocked", "isLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLocked", "isLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(to: Address, tokens: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVaultList(): Array<Address> {
    let result = super.call("getVaultList", "getVaultList():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getVaultList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getVaultList",
      "getVaultList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultAmount(): BigInt {
    let result = super.call("getVaultAmount", "getVaultAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVaultAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultAmount",
      "getVaultAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(tokenOwner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    tokenOwner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultAmountFrom(from: Address): BigInt {
    let result = super.call(
      "getVaultAmountFrom",
      "getVaultAmountFrom(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );

    return result[0].toBigInt();
  }

  try_getVaultAmountFrom(from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultAmountFrom",
      "getVaultAmountFrom(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultReleaseTime(): BigInt {
    let result = super.call(
      "getVaultReleaseTime",
      "getVaultReleaseTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVaultReleaseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultReleaseTime",
      "getVaultReleaseTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LimitTradeCall extends ethereum.Call {
  get inputs(): LimitTradeCall__Inputs {
    return new LimitTradeCall__Inputs(this);
  }

  get outputs(): LimitTradeCall__Outputs {
    return new LimitTradeCall__Outputs(this);
  }
}

export class LimitTradeCall__Inputs {
  _call: LimitTradeCall;

  constructor(call: LimitTradeCall) {
    this._call = call;
  }
}

export class LimitTradeCall__Outputs {
  _call: LimitTradeCall;

  constructor(call: LimitTradeCall) {
    this._call = call;
  }
}

export class RemoveLimitTradeCall extends ethereum.Call {
  get inputs(): RemoveLimitTradeCall__Inputs {
    return new RemoveLimitTradeCall__Inputs(this);
  }

  get outputs(): RemoveLimitTradeCall__Outputs {
    return new RemoveLimitTradeCall__Outputs(this);
  }
}

export class RemoveLimitTradeCall__Inputs {
  _call: RemoveLimitTradeCall;

  constructor(call: RemoveLimitTradeCall) {
    this._call = call;
  }
}

export class RemoveLimitTradeCall__Outputs {
  _call: RemoveLimitTradeCall;

  constructor(call: RemoveLimitTradeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReleateTokenToCall extends ethereum.Call {
  get inputs(): ReleateTokenToCall__Inputs {
    return new ReleateTokenToCall__Inputs(this);
  }

  get outputs(): ReleateTokenToCall__Outputs {
    return new ReleateTokenToCall__Outputs(this);
  }
}

export class ReleateTokenToCall__Inputs {
  _call: ReleateTokenToCall;

  constructor(call: ReleateTokenToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleateTokenToCall__Outputs {
  _call: ReleateTokenToCall;

  constructor(call: ReleateTokenToCall) {
    this._call = call;
  }
}

export class SetIsLockedCall extends ethereum.Call {
  get inputs(): SetIsLockedCall__Inputs {
    return new SetIsLockedCall__Inputs(this);
  }

  get outputs(): SetIsLockedCall__Outputs {
    return new SetIsLockedCall__Outputs(this);
  }
}

export class SetIsLockedCall__Inputs {
  _call: SetIsLockedCall;

  constructor(call: SetIsLockedCall) {
    this._call = call;
  }

  get _isLocked(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsLockedCall__Outputs {
  _call: SetIsLockedCall;

  constructor(call: SetIsLockedCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReleaseTokenCall extends ethereum.Call {
  get inputs(): ReleaseTokenCall__Inputs {
    return new ReleaseTokenCall__Inputs(this);
  }

  get outputs(): ReleaseTokenCall__Outputs {
    return new ReleaseTokenCall__Outputs(this);
  }
}

export class ReleaseTokenCall__Inputs {
  _call: ReleaseTokenCall;

  constructor(call: ReleaseTokenCall) {
    this._call = call;
  }
}

export class ReleaseTokenCall__Outputs {
  _call: ReleaseTokenCall;

  constructor(call: ReleaseTokenCall) {
    this._call = call;
  }
}

export class TokenToVaultCall extends ethereum.Call {
  get inputs(): TokenToVaultCall__Inputs {
    return new TokenToVaultCall__Inputs(this);
  }

  get outputs(): TokenToVaultCall__Outputs {
    return new TokenToVaultCall__Outputs(this);
  }
}

export class TokenToVaultCall__Inputs {
  _call: TokenToVaultCall;

  constructor(call: TokenToVaultCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get releastTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TokenToVaultCall__Outputs {
  _call: TokenToVaultCall;

  constructor(call: TokenToVaultCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
